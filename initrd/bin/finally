#!/bin/sh

set -e

TOP=$(cd "$(dirname $0)"/..; pwd)

OUT="${TOP}"/output/boot

. "${TOP}"/lib/misc.bash

case "$1" in
    aarch64) tty="ttyAMA0";;
    x86_64) tty="ttyS0";;
    *) tty="ttyS0"
esac

[ x"$tty" = x ] && tty="ttyS0"

mkinitrd() {
    local work="$1"

    cd $work; find . | cpio -o -H newc | gzip -c > "$OUT"/initrd-$A.gz

    printf "Initramfs file has been generated : "

    ls "$OUT"/initrd-$A.gz

    printf "\n"

    sleep 3

    return
}

echo
section "Ready to make a initrd file !\n"

mkdir -p "$ROOTFS"/usr/bin
mkdir -p "$ROOTFS"/usr/sbin
mkdir -p "$ROOTFS"/etc/init.d
mkdir -p "$ROOTFS"/etc/network
mkdir -p "$ROOTFS"/etc/network/if-up.d
mkdir -p "$ROOTFS"/etc/network/if-down.d
mkdir -p "$ROOTFS"/etc/network/if-pre-up.d
mkdir -p "$ROOTFS"/etc/network/if-post-down.d

cp -f "$(pwd)/config/init.sh" "$ROOTFS/init"

chmod +x "$ROOTFS/init"

cat >"$ROOTFS"/etc/inittab <<-EOF
# Startup the system
::sysinit:/bin/mount -o remount,rw /
::sysinit:/bin/mkdir -p /dev/pts /dev/shm
::sysinit:/bin/mount -a
::sysinit:/bin/mkdir -p /run/lock/subsys
::sysinit:mdev -s
::sysinit:/sbin/swapon -a
null::sysinit:/bin/ln -sf /proc/self/fd /dev/fd
null::sysinit:/bin/ln -sf /proc/self/fd/0 /dev/stdin
null::sysinit:/bin/ln -sf /proc/self/fd/1 /dev/stdout
null::sysinit:/bin/ln -sf /proc/self/fd/2 /dev/stderr
::sysinit:/bin/hostname -F /etc/hostname
# now run any rc scripts
::sysinit:/etc/init.d/rcS

tty1:2345:respawn:/sbin/getty -n -L 38400 tty1
tty2:23:respawn:/sbin/getty -n -L 38400 tty2
tty3:23:respawn:/sbin/getty -n -L 38400 tty3
tty4:23:respawn:/sbin/getty 38400 tty4
tty5:23:respawn:/sbin/getty 38400 tty5
tty6:23:respawn:/sbin/getty 38400 tty6

${tty}::respawn:/sbin/getty -n -L 115200 ${tty} vt100

::ctrlaltdel:/bin/swapoff -a
::ctrlaltdel:/sbin/reboot

::shutdown:/etc/init.d/rcK
::shutdown:/sbin/swapoff -a
EOF

cat >"$ROOTFS"/etc/mdev.conf <<-"EOF"
null        root:root 666 @chmod 666 $MDEV
zero        root:root 666
full        root:root 666
random        root:root 444
urandom        root:root 444
hwrandom    root:root 444
grsec        root:root 660

kmem        root:root 640
mem        root:root 640
port        root:root 640

# console may already exist; therefore ownership has to be changed with command
console        root:tty 600 @chmod 600 $MDEV
ptmx        root:tty 666
pty.*        root:tty 660

# Typical devices
tty        root:tty 666
tty[0-9]*    root:tty 660
vcsa*[0-9]*    root:tty 660
ttyS[0-9]*    root:root 660
ttyUSB[0-9]*    root:root 660

# input stuff
input/event[0-9]+    root:root 640
input/mice        root:root 640
input/mouse[0-9]    root:root 640
input/ts[0-9]        root:root 600

((xvd|[sv]d)[a-z])        root:disk    660    >disk/%1/0
((xvd|[sv]d)[a-z])([0-9]+)    root:disk    660    >disk/%1/%2
mmcblk([0-9]+)            root:disk    660    >disk/mmc/%1/0
mmcblk([0-9]+)p([0-9]+)        root:disk    660    >disk/mmc/%1/%2

EOF

cat >"$ROOTFS"/etc/init.d/rcK <<-"EOF"
#!/bin/sh

# Stop all init scripts in /etc/init.d
# executing them in reversed numerical order.
#
for i in $(ls -r /etc/init.d/S??* 2>/dev/null); do

     # Ignore dangling symlinks (if any).
     [ ! -f "$i" ] && continue

     case "$i" in
    *.sh)
        # Source shell script for speed.
        (
        trap - INT QUIT TSTP
        set stop
        . $i
        )
        ;;
    *)
        # No sh extension, so fork subprocess.
        $i stop
        ;;
    esac
done
EOF

cat >"$ROOTFS"/etc/init.d/rcS <<-"EOF"
#!/bin/sh


# Start all init scripts in /etc/init.d
# executing them in numerical order.
#
for i in $(ls -r /etc/init.d/S??* 2>/dev/null); do

     # Ignore dangling symlinks (if any).
     [ ! -f "$i" ] && continue

     case "$i" in
    *.sh)
        # Source shell script for speed.
        (
        trap - INT QUIT TSTP
        set start
        . $i
        )
        ;;
    *)
        # No sh extension, so fork subprocess.
        $i start
        ;;
    esac
done
EOF

cat >"$ROOTFS"/etc/init.d/S40network <<-"EOF"
#!/bin/sh
#
# Start the network....
#

# Debian ifupdown needs the /run/network lock directory
mkdir -p /run/network

case "$1" in
  start)
    printf "Starting network: "
    /sbin/ifup -a
    [ $? = 0 ] && echo "OK" || echo "FAIL"
    ;;
  stop)
    printf "Stopping network: "
    /sbin/ifdown -a
    [ $? = 0 ] && echo "OK" || echo "FAIL"
    ;;
  restart|reload)
    "$0" stop
    "$0" start
    ;;
  *)
    echo "Usage: $0 {start|stop|restart}"
    exit 1
esac

exit $?
EOF

cat >"$ROOTFS"/etc/network/if-pre-up.d/wait_iface <<-"EOF"
#!/bin/sh

# In case we have a slow-to-appear interface (e.g. eth-over-USB),
# and we need to configure it, wait until it appears, but not too
# long either. IF_WAIT_DELAY is in seconds.

if [ "${IF_WAIT_DELAY}" -a ! -e "/sys/class/net/${IFACE}" ]; then
    printf "Waiting for interface %s to appear" "${IFACE}"
    while [ ${IF_WAIT_DELAY} -gt 0 ]; do
        if [ -e "/sys/class/net/${IFACE}" ]; then
            printf "\n"
            exit 0
        fi
        sleep 1
        printf "."
        : $((IF_WAIT_DELAY -= 1))
    done
    printf " timeout!\n"
    exit 1
fi
EOF

chmod a+x "$ROOTFS"/etc/init.d/*

cat >"$ROOTFS"/etc/fstab <<-"EOF"
# <file system> <mount pt>  <type>  <options>   <dump>  <pass>
devpts  /dev/pts  devpts  defaults  0  0
tmpfs   /dev/shm  tmpfs   defaults  0  0
tmpfs   /run      tmpfs   defaults  0  0

EOF

cat >"$ROOTFS"/etc/group <<-"EOF"
root:x:0:
daemon:x:1:
bin:x:2:
sys:x:3:
adm:x:4:
tty:x:5:
disk:x:6:
EOF

cat >"$ROOTFS"/etc/passwd <<-"EOF"
root::0:0:root:/root:/bin/sh
daemon:x:1:1:daemon:/usr/sbin:/usr/sbin/nologin
bin:x:2:2:bin:/bin:/usr/sbin/nologin
sys:x:3:3:sys:/dev:/usr/sbin/nologin
sync:x:4:65534:sync:/bin:/bin/sync
EOF

touch "$ROOTFS"/etc/network/interfaces
echo -e "auto lo\niface lo inet loopback\n" > "$ROOTFS"/etc/network/interfaces

echo "bootstrap" >"$ROOTFS"/etc/hostname

find "${ROOTFS}"/usr/lib -type f -name "*.a" -delete || echo
find "${ROOTFS}"/usr/lib -type f -name "*.la" -delete || echo

rm -rf "${ROOTFS}"/usr/include/* || echo
rm -rf "${ROOTFS}"/usr/share/{man,doc,info,bash-completion} || echo

sleep 2
sync

mkinitrd "${ROOTFS}"

