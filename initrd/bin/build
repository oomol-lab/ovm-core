#!/bin/bash

set -o braceexpand
set -o errexit
set -o errtrace

export A
export TGT
export HOST
export ROOTFS
export CROSSTOOL
export LIBRARY_PATH
export CPPFLAGS
export LDFLAGS
export CFLAGS

: ${top:=`pwd`}
: ${out:="$ROOTFS"}
: ${work:=$top/work}
: ${srcdir:=$top/sources}
: ${patchdir:=$top/patches}

. "${top}"/lib/misc.bash

# 每一个build-scripts和cross-scripts目录里的脚本都继承了下面的函数方法
# 并且通过重写方法实现继承封装

state() {
    local latest

    if IPS= grep -Eo "^$name$" "$top/states/$step-$A" >/dev/null; then
        log_info "==> Ignore $name which been built ."
        exit 0
    fi

    latest=$(cat "$top/states/await-$A")
    if [ -n "$latest" ]; then
        if [[ "$latest" == "$name" ]]; then
            section "==> Continue build $name ..."
            return
        else
            log_fatal "Target $name has not been finished"
        fi
    fi

    section "==> Building $name ..."
    printf "$name" > "$top/states/await-$A"
}

fetch() {
    test -e "$srcdir/$src" || batch-download "$name"
}

unpack() {
    cd "$work"
    tar -xf "$srcdir/$src"
    : ${unpack:=$(basename $(basename $(basename $(basename "$src" .gz) .bz2) .xz) .tar)}
    cd "$unpack"
}

prep() {
    for x in $patches; do
        find "$patchdir" -type f -name "*$x*.patch" -exec patch -Np1 -i {} \;
        find "$patchdir" -type f -name "*$x*.diff" -exec patch -Np1 -i {} \;
    done
}

config() {
    if [ -x configure ]; then
        munge-config-sub $config_sub
        ./configure --prefix= --host=$TGT --target=$TGT $config_options
    fi
}

build() {
    make -j$(nproc)
}

install() {
    make DESTDIR="$tmp" install
}

stage() { :; }

name=$(basename $1)

. "$(dirname $1)/$(basename $1)"

_key=$(grep -E "^${name}#" "$top/config/download.list" | awk '{print $1}')
_version=$(echo "$_key" | cut -d# -f2)
_suffix=$(echo "$_key" | cut -d# -f3)

: ${src:="$name-$_version.$_suffix"}
: ${unpack:=$name-$_version}
: ${step:=$(basename $(dirname "$1"))}

(
    set -e
    state
    fetch
    unpack
    prep
    config
    build
    tmp=`mktemp -d`
    install
    stage
    if [ -n "$(ls "$tmp")" ]; then
        [ -d "$tmp"/boot ] && cp -frvP "$tmp"/boot/ "$top"/output/

        [ -d "$tmp"/etc ] && cp -frP "$tmp"/etc "$out"/
        [ -d "$tmp"/bin ] && cp -frP "$tmp"/bin "$out"/
        [ -d "$tmp"/sbin ] && cp -frP "$tmp"/sbin "$out"/
        [ -d "$tmp"/lib ] && cp -frP "$tmp"/lib/* "$out"/usr/lib/
        [ -d "$tmp"/lib64 ] && cp -frP "$tmp"/lib64/* "$out"/usr/lib/
        [ -d "$tmp"/usr/bin ] && cp -frP "$tmp"/usr/bin "$out"/usr/
        [ -d "$tmp"/usr/sbin ] && cp -frP "$tmp"/usr/sbin "$out"/usr/
        [ -d "$tmp"/usr/lib ] && cp -frP "$tmp"/usr/lib "$out"/usr/
        [ -d "$tmp"/usr/lib64 ] && cp -frP "$tmp"/usr/lib64/* "$out"/usr/lib/
        [ -d "$tmp"/usr/share ] && cp -frP "$tmp"/usr/share/* "$out"/usr/share/
        [ -d "$tmp"/usr/include ] && cp -frP "$tmp"/usr/include "$out"/usr/
        [ -d "$tmp"/usr/libexec ] && cp -frP "$tmp"/usr/libexec "$out"/usr/
        [ -d "$tmp"/usr/local ] && cp -frP "$tmp"/usr/local/* "$out"/usr/local/
    fi
    rm -rf "$tmp"

    cd "$top"
    rm -rf "$work/$unpack"

    printf "" > "$top/states/await-$A"

    echo
    echo "$name" >> "$top/states/$step-$A"
    section "==> Build target $name ok !"
)

