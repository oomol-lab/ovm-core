From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Black-Hole1 <bh@bugs.cc>
Date: Sun, 10 Sep 2023 19:09:50 +0800
Subject: refactor(package): improve podman

1. update version to 4.6.2
2. add registries.conf file
3. add podman systemd service

diff --git a/package/podman/podman.hash b/package/podman/podman.hash
index c011068682d3d803b094feb314e431fca304261d..47c82604cfe96e178a35d0b870fe97994513b35d 100644
--- a/package/podman/podman.hash
+++ b/package/podman/podman.hash
@@ -1,3 +1,3 @@
 # Locally computed
-sha256  830a633630bf6e61f2b8d4ca00efdd9a173ef25cdd49d4a4364c293e088561df  podman-4.5.0.tar.gz
+sha256  2d8e04f0c3819c3f0ed1ca5d01da87e6d911571b96ae690448f7f75df41f2ad1  podman-4.6.2.tar.gz
 sha256  62fb8a3a9621dc2388174caaabe9c2317b694bb9a1d46c98bcf5655b68f51be3  LICENSE
diff --git a/package/podman/podman.mk b/package/podman/podman.mk
index f888f3ae5e6e6cc8eb325b8dc09c41a9f6f5c09a..ccbc8e8f8e3429e02c92ce87c9f94963a9a31ca2 100644
--- a/package/podman/podman.mk
+++ b/package/podman/podman.mk
@@ -4,7 +4,7 @@
 #
 ################################################################################
 
-PODMAN_VERSION = 4.5.0
+PODMAN_VERSION = 4.6.2
 PODMAN_SITE = $(call github,containers,podman,v$(PODMAN_VERSION))
 PODMAN_LICENSE = Apache-2.0
 PODMAN_LICENSE_FILES = LICENSE
@@ -65,11 +65,19 @@ define PODMAN_INSTALL_TARGET_CMDS
 	$(INSTALL) -d -m 755 $(TARGET_DIR)/etc/containers
 	$(INSTALL) -D -m 644 $(PODMAN_PKGDIR)/containers-policy.json \
 		$(TARGET_DIR)/etc/containers/policy.json
+	$(INSTALL) -D -m 644 $(PODMAN_PKGDIR)/registries.conf \
+		$(TARGET_DIR)/etc/containers/registries.conf
 endef
 
 define PODMAN_INSTALL_INIT_SYSTEMD
-	$(TARGET_MAKE_ENV) $(MAKE) -C $(@D) DESTDIR=$(TARGET_DIR) PREFIX=/usr \
-		install.systemd
+	$(INSTALL) -D -m 644 $(PODMAN_PKGDIR)/systemd/podman.socket \
+		$(TARGET_DIR)/etc/systemd/system/
+	$(INSTALL) -D -m 644 $(PODMAN_PKGDIR)/systemd/podman.service \
+		$(TARGET_DIR)/etc/systemd/system/
+	$(INSTALL) -D -m 644 $(PODMAN_PKGDIR)/systemd/podman-restart.service \
+		$(TARGET_DIR)/etc/systemd/system/
+	$(INSTALL) -D -m 644 $(PODMAN_PKGDIR)/systemd/podman-clean-transient.service \
+		$(TARGET_DIR)/etc/systemd/system/
 endef
 
 $(eval $(golang-package))
diff --git a/package/podman/registries.conf b/package/podman/registries.conf
new file mode 100644
index 0000000000000000000000000000000000000000..4febb8d365fc70a8e644962b7dc5b457466d9aba
--- /dev/null
+++ b/package/podman/registries.conf
@@ -0,0 +1,5 @@
+unqualified-search-registries = ["docker.io"]
+[[registry]]
+prefix = "docker.io"
+location = "docker.io"
+insecure = true
\ No newline at end of file
diff --git a/package/podman/systemd/podman-clean-transient.service b/package/podman/systemd/podman-clean-transient.service
new file mode 100644
index 0000000000000000000000000000000000000000..7ae1b386310221155bafc2b45553ef4b9c94f896
--- /dev/null
+++ b/package/podman/systemd/podman-clean-transient.service
@@ -0,0 +1,21 @@
+# This service runs once each boot to remove potential leftover
+# container state from previous boots.
+
+# This is needed when using transient storage mode in podman where the
+# database and other configs are stored in tmpfs, but some other files
+# are not. If we don't run this after an unclean boot then there may
+# be some leftover files that grow over time.
+
+[Unit]
+Description=Clean up podman transient data
+RequiresMountsFor=%t/containers
+Documentation=man:podman-system-prune(1)
+Requires=boot-complete.target
+After=local-fs.target boot-complete.target
+
+[Service]
+Type=oneshot
+ExecStart=/usr/bin/podman system prune --external
+
+[Install]
+WantedBy=default.target
\ No newline at end of file
diff --git a/package/podman/systemd/podman-restart.service b/package/podman/systemd/podman-restart.service
new file mode 100644
index 0000000000000000000000000000000000000000..9e9d33220c9f571a31ff38006517078fd30bc440
--- /dev/null
+++ b/package/podman/systemd/podman-restart.service
@@ -0,0 +1,16 @@
+[Unit]
+Description=Podman Start All Containers With Restart Policy Set To Always
+Documentation=man:podman-start(1)
+StartLimitIntervalSec=0
+Wants=network-online.target
+After=network-online.target
+
+[Service]
+Type=oneshot
+RemainAfterExit=true
+Environment=LOGGING="--log-level=info"
+ExecStart=/usr/bin/podman $LOGGING start --all --filter restart-policy=always
+ExecStop=/bin/sh -c '/usr/bin/podman $LOGGING stop $(/usr/bin/podman container ls --filter restart-policy=always -q)'
+
+[Install]
+WantedBy=default.target
\ No newline at end of file
diff --git a/package/podman/systemd/podman.service b/package/podman/systemd/podman.service
new file mode 100644
index 0000000000000000000000000000000000000000..ca9f2fc6460d87ff2f3363cf739f971e27e28068
--- /dev/null
+++ b/package/podman/systemd/podman.service
@@ -0,0 +1,16 @@
+[Unit]
+Description=Podman API Service
+Requires=podman.socket
+After=podman.socket
+Documentation=man:podman-system-service(1)
+StartLimitIntervalSec=0
+
+[Service]
+Delegate=true
+Type=exec
+KillMode=process
+Environment=LOGGING="--log-level=info"
+ExecStart=/usr/bin/podman $LOGGING system service -t0 tcp://0.0.0.0:58125
+
+[Install]
+WantedBy=default.target
\ No newline at end of file
diff --git a/package/podman/systemd/podman.socket b/package/podman/systemd/podman.socket
new file mode 100644
index 0000000000000000000000000000000000000000..33ec89893d6192f398d44b1e5b61a0a737d809e7
--- /dev/null
+++ b/package/podman/systemd/podman.socket
@@ -0,0 +1,10 @@
+[Unit]
+Description=Podman API Socket
+Documentation=man:podman-system-service(1)
+
+[Socket]
+ListenStream=%t/podman/podman.sock
+SocketMode=0660
+
+[Install]
+WantedBy=sockets.target
\ No newline at end of file
